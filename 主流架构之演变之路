1.什么是架构:
    它主要是一种思想。

2.如何理解架构设计
    1.架构解决了什么问题
    2.架构模式是如何划分角色的。
    3.角色间是如何建立联系的。

3.什么是MVC架构
    MVC在前端是为了分离"数据"和"视图"这两层。
    M层：表示的是Model数据层，负责获取数据（比如网络请求）
    V层：表示的是我们View层，相当于我们的xml布局文件，负责处理UI。
    C层：表示的是我们Controller层，相当于我们的Activity/Fragment。负责处理业务逻辑。
        他们之间的层次关系是：C——>M——>V——C，表示控制层进行访问M层进行请求数据，M层获取数据后进行更新UI，V层进行更新。
    MVC缺点：
        1.当我们页面的业务逻辑较大的时候，代码量较多，查找方法不太方便，不易于后期维护。

4.什么是MVP架构
    MVP就是解决MVC架构"数据层"和"视图层"交织在一起的问题。也解决Activity/Fragment代码量过于繁重问题。衍生
    出来的MVP架构。
    MVP架构器让宿主专注于UI逻辑和用户交互的处理。把宿主的业务逻辑全部分离出来。所有的业务逻辑交由Presenter层来完成。
    缺点就是类的数量会增多。
    M层：表示的是Model数据层，负责获取数据，具体的网络请求（比如网络请求）
    V层：表示的是我们View层，相当于我们的Activity/Fragment，负责处理UI和用户交互。
    P层：表示的是我们的Presenter层，负责处理我们业务逻辑层，它是Model层和View的之间的桥梁。
        他们之间的层次关系是：V——>P——>M,



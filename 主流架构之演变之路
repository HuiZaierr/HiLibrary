1.什么是架构:
    它主要是一种思想。

2.如何理解架构设计
    1.架构解决了什么问题
    2.架构模式是如何划分角色的。
    3.角色间是如何建立联系的。

3.什么是MVC架构
    MVC在前端是为了分离"数据"和"视图"这两层。
    M层：表示的是Model数据层，负责获取数据（比如网络请求）
    V层：表示的是我们View层，相当于我们的xml布局文件，负责处理UI。
    C层：表示的是我们Controller层，相当于我们的Activity/Fragment。负责处理业务逻辑。
        他们之间的层次关系是：C——>M——>V——C，表示控制层进行访问M层进行请求数据，M层获取数据后进行更新UI，V层进行更新。
    MVC缺点：
        1.当我们页面的业务逻辑较大的时候，代码量较多，查找方法不太方便，不易于后期维护。

4.什么是MVP架构
    MVP就是解决MVC架构"数据层"和"视图层"交织在一起的问题。也解决Activity/Fragment代码量过于繁重问题。衍生
    出来的MVP架构。
    MVP架构器让宿主专注于UI逻辑和用户交互的处理。把宿主的业务逻辑全部分离出来。所有的业务逻辑交由Presenter层来完成。
    缺点就是类的数量会增多。
    M层：表示的是Model数据层，负责获取数据，具体的网络请求（比如网络请求）
    V层：表示的是我们View层，相当于我们的Activity/Fragment，负责处理UI和用户交互。
    P层：表示的是我们的Presenter层，负责处理我们业务逻辑层，它是Model层和View的之间的桥梁。
        他们之间的层次关系是：V——>P——>M,
     MVP优点：
        1.可以在项目赴藏的页面进行使用，简化代码，实现逻辑的清晰性。
     MVP缺点：
        1.它所创建的类或者接口较多。

5.什么是MVVM
    MVVM表示的是View和ViewModel进行双向的绑定，数据变更时UI自动刷新，UI变化了数据也会自动同步最新的值。
    使用：
       //开启DataBinding
       android {
         ...
         dataBinding {
           enabled = true
         }
       }
    M层：表示的是Model数据层，负责获取数据，具体的网络请求（比如网络请求）
    V层：表示的是我们View层，相当于我们的Activity/Fragment/xml，负责处理UI和用户交互。
    VM层：表示的是我们的ViewModel层，负责和View层数据的双向绑定，无需通过接口进行回掉设置。
       他们之间的层次关系是：V——>VM——>M
    MVVM优点：
        1.简化了接口的回掉,解决了View和数据之间的双向绑定。
        2.减少了模板代码，比如findViewById等。
        3.减少了数据空安全问题。

6.模块化/组件化/插件化
    模块化/组件化：业务模块的分离，高内聚，低耦合，代码边界清晰，利于团队协作开发。加快编译速度，提高开发效率。
           AndroidStudio支持多个模块开发， 我们可以将常用的功能，控件，基础类，第三方库，权限等等公
           供的部分进行抽离封装。把业务分为N个模块进行独立的管理。所有的业务组件都依赖于封装的基础库。
    插件化：就是将每一个模块作为一个插件，不进行打包到App中，宿主可以动态的加载，当我们在使用时需要用到那个时就进行下载插件。
           每个业务方自行管理版本。它解决的是模块的动态下发，四大组件生命周期的问题。
           好处：解决了包体积的大小，和方法数变量数也能随之解决。